const asyncHandler = require('express-async-handler');
const Order = require('../models/Order');
const DeliveryPerson = require('../models/DeliveryPerson');
const DeliveryRequest = require('../models/DeliveryRequest');

// @desc    Get delivery requests by city
// @route   GET /api/deliveryperson/requests?city=...
// @access  Private (delivery person only)
exports.getDeliveryRequests = asyncHandler(async (req, res) => {
    // Delivery person ‡§ï‡•Ä city query parameter ‡§∏‡•á ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç
    const { city } = req.query;

    if (!city) {
        res.status(400);
        throw new Error('City is required to find delivery requests');
    }

    // ‡§â‡§® orders ‡§ï‡•ã ‡§ñ‡•ã‡§ú‡•á‡§Ç ‡§ú‡•ã "Processing" status ‡§Æ‡•á‡§Ç ‡§π‡•à‡§Ç ‡§î‡§∞ ‡§ú‡§ø‡§®‡§ï‡§æ shippingAddress ‡§ï‡§æ city match ‡§ï‡§∞‡§§‡§æ ‡§π‡•ã
    // ‡§∏‡§æ‡§• ‡§π‡•Ä, ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§â‡§®‡§ï‡§æ ‡§ï‡•ã‡§à delivery person assigned ‡§® ‡§π‡•ã
    const orders = await Order.find({
        status: 'Processing',
        'shippingAddress.city': { $regex: new RegExp(city, 'i') }, // Case-insensitive search
        deliveryPersonId: { $exists: false } // Only show unassigned orders
    })
    .populate('userId', 'name mobileNumber') // user details fetch ‡§ï‡§∞‡•á‡§Ç
    .populate('products.productId', 'title description image') // product details fetch ‡§ï‡§∞‡•á‡§Ç
    .populate('shopId', 'name shopName city mobileNumber') // shop details fetch ‡§ï‡§∞‡•á‡§Ç
    .sort({ createdAt: -1 }); // Newest orders first

    res.status(200).json(orders);
});

// @desc    Accept a delivery request
// @route   PUT /api/deliveryperson/accept/:id
// @access  Private (delivery person only)
exports.acceptDeliveryRequest = asyncHandler(async (req, res) => {
    const orderId = req.params.id;
    const deliveryPersonId = req.user.id; // auth middleware ‡§∏‡•á user ID ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç

    // Order ‡§ï‡•ã ‡§ñ‡•ã‡§ú‡•á‡§Ç ‡§î‡§∞ update ‡§ï‡§∞‡•á‡§Ç
    const order = await Order.findById(orderId);

    if (!order) {
        res.status(404);
        throw new Error('Order not found');
    }

    // Order ‡§ï‡•ã ‡§∏‡§ø‡§∞‡•ç‡§´ ‡§§‡§≠‡•Ä accept ‡§ï‡§∞‡•á‡§Ç ‡§ú‡§¨ ‡§µ‡§π 'Processing' ‡§Æ‡•á‡§Ç ‡§π‡•ã ‡§î‡§∞ unassigned ‡§π‡•ã
    if (order.status !== 'Processing' || order.deliveryPersonId) {
        res.status(400);
        throw new Error('This order cannot be accepted');
    }

    order.status = 'Accepted';
    order.deliveryPersonId = deliveryPersonId;

    await order.save();

    res.json({ message: 'Order accepted successfully', order });
});

exports.updateOrderStatus = asyncHandler(async (req, res) => {
    const { id } = req.params;
    const { newStatus } = req.body; // Frontend ‡§∏‡•á ‡§®‡§Ø‡§æ ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç
    const deliveryPersonId = req.user.id; // Authenticated delivery person ‡§ï‡•Ä ID

    // ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§ï‡•ã ‡§â‡§∏‡§ï‡•Ä ID ‡§î‡§∞ deliveryPersonId ‡§∏‡•á ‡§ñ‡•ã‡§ú‡•á‡§Ç
    const order = await Order.findOne({ _id: id, deliveryPersonId });

    if (!order) {
        res.status(404);
        throw new Error('Order not found or not assigned to you');
    }

    // Status transition logic ‡§ï‡•ã implement ‡§ï‡§∞‡•á‡§Ç
    // ‡§Ø‡§π ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§ï‡§ø ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏ ‡§∏‡§π‡•Ä ‡§ï‡•ç‡§∞‡§Æ ‡§Æ‡•á‡§Ç ‡§Ö‡§™‡§°‡•á‡§ü ‡§π‡•ã
    const validTransitions = {
        'Accepted': 'Shifted',
        'Shifted': 'Out for Delivery',
        'Out for Delivery': 'Delivered'
    };

    if (validTransitions[order.status] !== newStatus) {
        res.status(400);
        throw new Error(`Invalid status transition from ${order.status} to ${newStatus}`);
    }

    // ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏ ‡§ï‡•ã ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
    order.status = newStatus;
    await order.save();

    res.status(200).json({
        message: 'Order status updated successfully',
        order: order // ‡§Ö‡§™‡§°‡•á‡§ü‡•á‡§° ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§ï‡•ã ‡§µ‡§æ‡§™‡§∏ ‡§≠‡•á‡§ú‡•á‡§Ç
    });
});

// @desc    Get delivery orders for a specific delivery person
exports.getDeliveryOrders = asyncHandler(async (req, res) => {
    const deliveryPersonId = req.user.id; // auth middleware ‡§∏‡•á delivery person ID

    // ‡§â‡§® orders ‡§ï‡•ã ‡§ñ‡•ã‡§ú‡•á‡§Ç ‡§ú‡•ã ‡§á‡§∏ delivery person ‡§ï‡•ã assign ‡§ï‡§ø‡§è ‡§ó‡§è ‡§π‡•à‡§Ç
    // ‡§î‡§∞ ‡§ú‡§ø‡§®‡§ï‡•Ä status 'Processing' ‡§Ø‡§æ 'Cancelled' ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à
    const orders = await Order.find({
        deliveryPersonId: deliveryPersonId,
        // üëá ‡§Ø‡§π‡§æ‡§Å 'Shifted' ‡§î‡§∞ 'Delivered' ‡§ï‡•ã ‡§≠‡•Ä ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§ï‡§∞‡•á‡§Ç
        status: { $in: ['Accepted', 'Shifted', 'Out for Delivery', 'Delivered'] } 
    })
    .populate('userId', 'name mobileNumber')
    .populate('products.productId', 'name image description price')
    .populate('shopId', 'name shopName city mobileNumber')
    .sort({ createdAt: -1 });

    res.status(200).json(orders);
});

// @desc    Send a delivery request to the seller
// @route   PUT /api/deliveryperson/request-to-deliver/:orderId
// @access  Private (delivery person only)
exports.sendDeliveryRequest = asyncHandler(async (req, res) => {
    try {
        const orderId = req.params.orderId;
        const deliveryPersonId = req.user.id;

        // ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§Ö‡§≠‡•Ä ‡§≠‡•Ä 'Processing' ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§Æ‡•á‡§Ç ‡§π‡•à
        const order = await Order.findById(orderId);
        if (!order || order.status !== 'Processing') {
            return res.status(400).json({ msg: 'This order is not available for delivery requests.' });
        }
        
        // ‚úÖ 1. ‡§â‡§∏ ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§ï‡•ã‡§à 'Pending' ‡§∞‡§ø‡§ï‡•ç‡§µ‡•á‡§∏‡•ç‡§ü ‡§π‡•à ‡§Ø‡§æ ‡§®‡§π‡•Ä‡§Ç, ‡§á‡§∏‡§ï‡•Ä ‡§ú‡§æ‡§Å‡§ö ‡§ï‡§∞‡•á‡§Ç‡•§
        const existingPendingRequest = await DeliveryRequest.findOne({ 
            orderId, 
            status: 'Pending' 
        });

        if (existingPendingRequest) {
            return res.status(400).json({ msg: 'A pending request for this order already exists.' });
        }

        // ‚úÖ 2. ‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏ ‡§ï‡•á ‡§∏‡§æ‡§•, ‡§â‡§∏ ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡•å‡§ú‡•Ç‡§¶‡§æ ‡§∞‡§ø‡§ï‡•ç‡§µ‡•á‡§∏‡•ç‡§ü ‡§ï‡•ã ‡§ñ‡•ã‡§ú‡•á‡§Ç‡•§
        //      ‡§Ø‡§π ‡§ú‡§æ‡§Å‡§ö ‡§ï‡§∞‡§§‡•Ä ‡§π‡•à ‡§ï‡§ø ‡§â‡§∏ ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•ã‡§à ‡§≠‡•Ä ‡§∞‡§ø‡§ï‡•ç‡§µ‡•á‡§∏‡•ç‡§ü ‡§™‡§π‡§≤‡•á ‡§≠‡•á‡§ú‡•Ä ‡§ó‡§à ‡§π‡•à ‡§Ø‡§æ ‡§®‡§π‡•Ä‡§Ç‡•§
        const existingRequest = await DeliveryRequest.findOne({ orderId });
        
        if (existingRequest) {
            // ‡§Ø‡§¶‡§ø ‡§∞‡§ø‡§ï‡•ç‡§µ‡•á‡§∏‡•ç‡§ü ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§π‡•à, ‡§§‡•ã ‡§á‡§∏‡•á ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§™‡§∞‡•ç‡§∏‡§® ‡§ï‡•ã ‡§Ö‡§∏‡§æ‡§á‡§® ‡§ï‡§∞‡•á‡§Ç
            // ‡§î‡§∞ ‡§â‡§∏‡§ï‡§æ ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏ 'Pending' ‡§™‡§∞ ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç‡•§
            // ‡§Ø‡§π E11000 ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§ï‡•ã ‡§∞‡•ã‡§ï‡§§‡§æ ‡§π‡•à ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø ‡§π‡§Æ ‡§è‡§ï ‡§®‡§Ø‡§æ ‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú‡§º ‡§®‡§π‡•Ä‡§Ç ‡§¨‡§®‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç‡•§
            existingRequest.deliveryPersonId = deliveryPersonId;
            existingRequest.status = 'Pending';
            await existingRequest.save();
            return res.status(200).json({ msg: 'Delivery request sent successfully.' });
        }
        
        // ‚úÖ 3. ‡§Ø‡§¶‡§ø ‡§ï‡•ã‡§à ‡§≠‡•Ä ‡§Æ‡•å‡§ú‡•Ç‡§¶‡§æ ‡§∞‡§ø‡§ï‡•ç‡§µ‡•á‡§∏‡•ç‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à, ‡§§‡•ã ‡§è‡§ï ‡§®‡§Ø‡§æ ‡§∞‡§ø‡§ï‡•ç‡§µ‡•á‡§∏‡•ç‡§ü ‡§¨‡§®‡§æ‡§è‡§Ç‡•§
        const newRequest = new DeliveryRequest({
            orderId,
            deliveryPersonId,
            status: 'Pending'
        });
        await newRequest.save();

        res.status(200).json({ msg: 'Delivery request sent successfully.' });

    } catch (err) {
        console.error(err.message);
        // MongoDB ‡§°‡•Å‡§™‡•ç‡§≤‡§ø‡§ï‡•á‡§ü ‡§ï‡•Å‡§Ç‡§ú‡•Ä ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§ï‡•á ‡§≤‡§ø‡§è ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ
        if (err.code === 11000) {
            return res.status(400).json({ msg: 'Duplicate request found. Please contact support if you believe this is an error.' });
        }
        res.status(500).send('Server Error');
    }
});